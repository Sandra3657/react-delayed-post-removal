// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Post from "./post.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Button from "./Button.bs.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Belt_MapString from "bs-platform/lib/es6/belt_MapString.js";

function s(prim) {
  return prim;
}

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* DeleteLater */0 :
        var forDeletion = Belt_MapString.set(state.forDeletion, Post.id(action._0), action._1);
        return {
                posts: state.posts,
                forDeletion: forDeletion
              };
    case /* DeleteAbort */1 :
        var forDeletion$1 = Belt_MapString.remove(state.forDeletion, Post.id(action._0));
        return {
                posts: state.posts,
                forDeletion: forDeletion$1
              };
    case /* DeleteNow */2 :
        var post = action._0;
        var forDeletion$2 = Belt_MapString.remove(state.forDeletion, Post.id(post));
        var pos = state.posts.findIndex(function (item) {
              return Caml_obj.caml_equal(item, post);
            });
        state.posts.splice(pos, 1);
        return {
                posts: state.posts,
                forDeletion: forDeletion$2
              };
    
  }
}

function PostFeed$PostItem(Props) {
  var post = Props.post;
  var dispatch = Props.dispatch;
  var title = Post.title(post);
  var author = Post.author(post);
  var text = Post.text(post);
  var textDivs = Belt_Array.mapWithIndex(text, (function (i, x) {
          return React.createElement("p", {
                      key: String(i),
                      className: "mb-1 text-sm"
                    }, x);
        }));
  return React.createElement("div", {
              className: "bg-green-700 hover:bg-green-900 text-gray-300 hover:text-gray-100 px-8 py-4 mb-4"
            }, React.createElement("h2", {
                  className: "text-2xl mb-1"
                }, title), React.createElement("h3", {
                  className: "mb-4"
                }, author), textDivs, React.createElement(Button.make, {
                  text: "Remove this post",
                  className: "mr-4 mt-4 bg-red-500 hover:bg-red-900 text-white py-2 px-4",
                  handleClick: (function (_mouseEvt) {
                      var timeoutId = setTimeout((function (param) {
                              return Curry._1(dispatch, {
                                          TAG: /* DeleteNow */2,
                                          _0: post
                                        });
                            }), 10000);
                      return Curry._1(dispatch, {
                                  TAG: /* DeleteLater */0,
                                  _0: post,
                                  _1: timeoutId
                                });
                    })
                }));
}

var PostItem = {
  make: PostFeed$PostItem
};

function PostFeed$DeletePost(Props) {
  var post = Props.post;
  var dispatch = Props.dispatch;
  var timeoutId = Props.timeoutId;
  var title = Post.title(post);
  var author = Post.author(post);
  return React.createElement("div", {
              className: "relative bg-yellow-100 px-8 py-4 mb-4 h-40"
            }, React.createElement("p", {
                  className: "text-center white mb-1"
                }, "This post from " + title + " by " + author + " will be permanently removed in 10 seconds."), React.createElement("div", {
                  className: "flex justify-center"
                }, React.createElement(Button.make, {
                      text: "Restore",
                      className: "mr-4 mt-4 bg-yellow-500 hover:bg-yellow-900 text-white py-2 px-4",
                      handleClick: (function (_mouseEvt) {
                          clearTimeout(timeoutId);
                          return Curry._1(dispatch, {
                                      TAG: /* DeleteAbort */1,
                                      _0: post
                                    });
                        })
                    }), React.createElement(Button.make, {
                      text: "Delete Immediately",
                      className: "mr-4 mt-4 bg-red-500 hover:bg-red-900 text-white py-2 px-4",
                      handleClick: (function (_mouseEvt) {
                          clearTimeout(timeoutId);
                          return Curry._1(dispatch, {
                                      TAG: /* DeleteNow */2,
                                      _0: post
                                    });
                        })
                    })), React.createElement("div", {
                  className: "bg-red-500 h-2 w-full absolute top-0 left-0 progress"
                }));
}

var DeletePost = {
  make: PostFeed$DeletePost
};

var initialState = {
  posts: Post.examples,
  forDeletion: undefined
};

function PostFeed(Props) {
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var state = match[0];
  var divs = Belt_Array.map(state.posts, (function (post) {
          var postId = Post.id(post);
          var deleteId = Belt_MapString.get(state.forDeletion, postId);
          if (deleteId !== undefined) {
            return React.createElement(PostFeed$DeletePost, {
                        post: post,
                        dispatch: dispatch,
                        timeoutId: Caml_option.valFromOption(deleteId),
                        key: postId
                      });
          } else {
            return React.createElement(PostFeed$PostItem, {
                        post: post,
                        dispatch: dispatch,
                        key: postId
                      });
          }
        }));
  return React.createElement("div", {
              className: "max-w-3xl mx-auto mt-8 relative"
            }, divs);
}

var make = PostFeed;

export {
  s ,
  reducer ,
  PostItem ,
  DeletePost ,
  initialState ,
  make ,
  
}
/* Post Not a pure module */
